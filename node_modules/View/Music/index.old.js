/**
 * Created by leewoongjae on 15. 7. 6..
 */
module.exports = (function() {
    "use strict";

    var $ = global.window.$;
    var io = require('socket.io-client');

    var application = global.getApplication();

    var Notification = application.getNotification();
    var Outside = application.getOutside();
    var Effect = application.getEffect();

    var MusicPlayer = function() {

        this.dom = $("#Scene-MusicPlayer");
        this.domItemList = null;
        this.domTotalPage = null;
        this.domCurrentPage = null;
        this.domBtnPlay = null;
        this.domBtnPause = null;
        this.domBtnShuffle = null;
        this.domBtnLoop = null;
        this.domBtnOnly = null;
        this.domToggle = null;
        this.domMode = null;
        this.count = 0;
        this.showDuration = 300;
        this.index = 0;
        this.isPlay = false;
        this.isMute = false;
        this.audioVolume = 0.5;
        this.duration = 0;
        this.playTime = 0;
        this.playList = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19];
        this.playMode = 1;
        this.isTimeline = true;
        this.timelineTimer = null;
        this.raspIP = "http://192.168.0.18:50415";
        this.socket = null;
        this.inputCount = 0;
        this.inputSpeed = 0;
        this.inputLast = null;
        this.inputTimer = null;
        this.inputDuration = 300;
        this.moveTimer = null;
        this.isFirstUser = -1;

        this.make();

    };

    MusicPlayer.prototype.make = function () {

        var self = this;

        self.dom.empty();

        $.get("http://192.168.0.18:50415", function(data) {

            var items = JSON.parse(data);

            for (var i = 0; i < items.length; i++) {

                var item = items[i];

                self.dom.append("<div class=\"item\" id=\"item" + i + "\">" +
                    "<div class =\"imgCircle\">" +
                    "<img class =\"coverImg\" id=\"image" + i + "\" src=\"images/Music/" + item["background"] + "_03.png\"/>" +
                    "</div>" +
                    "<div class=\"select\"></div>" +
                    "</div>");

            }

            self.dom.append("<div class =\"toggle\">" +
                "<div class=\"select\"></div>" +
                "<div class =\"icon play\"></div>" +
                "<div class =\"icon pause\"></div>" +
                "</div>" +
                "<div class =\"mode\">" +
                "<div class=\"select\"></div>" +
                "<div class =\"icon shuffle\"></div>" +
                "<div class =\"icon loop\"></div>" +
                "<div class =\"icon only\"></div>" +
                "</div>");

            self.type = "list";
            self.domItemList = self.dom.find(".item");
            self.domToggle = self.dom.find(".toggle");
            self.domBtnPlay = self.domToggle.find(".play");
            self.domBtnPause = self.domToggle.find(".pause");

            self.domMode = self.dom.find(".mode");
            self.domBtnShuffle = self.domMode.find(".shuffle");
            self.domBtnLoop = self.domMode.find(".loop");
            self.domBtnOnly = self.domMode.find(".only");

            self.count = self.domItemList.length;

            self.socket = io(self.raspIP);

            self.socket.on('connect', function () {

                console.log("MusicPlayer socket connect");

            });

            self.socket.on("indexFromMP", function(data) {

                // 노래 선택
                if (self.index != Number(data.index)) {

                    console.log("바뀜");

                    self.index = Number(data.index);
                    self.updateView();

                }

                //

            });

            self.socket.on("tickFromMP", function(data) {

                // 노래 선택
                if (self.index != Number(data.index)) {

                    console.log("바뀜");

                    self.index = Number(data.index);
                    self.updateView();

                }

                //

            });

            self.socket.on("toggleFromMP", function(_isPlay) {

                self.isPlay = _isPlay;

                self.updateView();

            });

            
            self.socket.on('getAudioInfo', function (data) {

                if (data.index != undefined) {
             
                    if (self.index != Number(data.index)) {
             
                        self.index = Number(data.index);
                        self.updateView();
                    
                    }
             
                }

                if (data.playList != undefined) {
             
                    if (self.playList != data.playList) {
            
                        self.playList = data.playList;
                        self.updateList();
                        self.updateView(0);
             
                    }
             
                }

                if (data.playTime != undefined) {
            
                    if (self.playTime != Number(data.playTime)) {
            
                        self.playTime = Number(data.playTime);

                        try {
             
                            if (app.scene == MusicPlayer && self.isTimeline) {
            
                                Notification.Timeline.setCurrentTime(self.playTime);
                                Notification.Timeline.show();
             
                            }
             
                        } catch (e) {}
            
                    }
             
                }

                if (data.duration != undefined) {
             
                    if (self.duration != Number(data.duration)) {
            
                        self.duration = Number(data.duration);
                        Notification.Timeline.setDuration(self.duration);
             
                    }
             
                }

                if (data.isPlay != undefined) {

                    if (self.isPlay === null) {

                        self.isPlay = data.isPlay;
                        self.updateView();

                    } else {

                        if (self.isPlay != data.isPlay) {

                            self.isPlay = data.isPlay;
                            self.updateView();

                        }


                    }

                }

                if (data.isMute != undefined) {
            
                    if (self.isMute != data.isMute) {
            
                        self.isMute = data.isMute;
                        self.updateView();
            
                    }
             
                }
             
                if (data.volume != undefined) {

                    if (self.audioVolume != Number(data.volume)) {

                        self.audioVolume = Number(data.volume);

                        console.log("volume : " + self.audioVolume);

                        try {

                            if (app.scene == MusicPlayer) {

                                Notification.Volume.setVolume(self.audioVolume);

                            }

                        } catch (e) {}

                    }

                }

                if (data.playMode != undefined) {
            
                    if (self.playMode != data.playMode) {
            
                        self.playMode = data.playMode;
                        self.updateView();
             
                    }
             
                }

            });
             
            self.init();

        });

    };

    MusicPlayer.prototype.init = function () {

        var self = this;
        Notification.Timeline.setDuration(self.duration);
        Notification.Timeline.setCurrentTime(self.playTime);
        //Notification.Volume.setVolume(self.audioVolume);
        self.updateList();
        self.updateView(0);

    };

    MusicPlayer.prototype.unInit = function () {

    };

    MusicPlayer.prototype.show = function () {

        this.dom.fadeIn();
        Outside.domHome.hide();

    };

    MusicPlayer.prototype.hide = function () {

        this.dom.fadeOut();
        Outside.domHome.show();
    };

    MusicPlayer.prototype.getName = function () {

        return "Music";

    };

    MusicPlayer.prototype.nextSong = function () {
        var self = this;
        if (self.playMode == 0) {
            this.moveRelativeIndex(1);
        } else if (self.playMode == 1) {
            this.moveRelativeIndex(1);
        } else if (self.playMode == 2) {
            //this.moveRelativeIndex(this.index);
        }
    };

    MusicPlayer.prototype.toggle = function (_trigger, _swipe) {

        var self = this;

        var centerDom = $(self.domItemList[self.index]);

        if (_trigger == "D") {

            Effect.quickDown(centerDom);

        } else {

            Effect.up(centerDom, function () {

                self.socket.emit("toggleFromTV");

            });

        }

    };

    MusicPlayer.prototype.switch = function (_trigger) {

        var self = this;

        if (_trigger == "U") {

            if (!self.isPlay) Notification.Music.turnOnMusic();
            else Notification.Music.turnOffMusic();
            self.socket.emit("toggle_server");

        }

    };

    MusicPlayer.prototype.selectRelativeIndex = function (_index) {

        var self = this;

        self.index = _index;

        this.moveIndex(_index);

    };

    //절대적인 index로 움직임
    MusicPlayer.prototype.moveIndex = function (_index, _duration) {

        var self = this;

        self.index = _index;
        self.isTimeline = false;

        self.updateView(self.showDuration, function () {

            self.socket.emit("changeFromTV", self.index);

            self.isTimeline = true;
            self.updateView();

        });

    };

    //지금 현재의 상태에서 상대적으로 움직임
    MusicPlayer.prototype.moveRelativeIndex = function (_index) {

        //루프
        if (this.index + _index > this.count - 1) { this.index = 0; console.log("true"); }
        else if (this.index + _index < 0) { this.index = this.count - 1; console.log("false"); }
        else this.index = this.index + _index;

        //절대 index로 이동
        this.moveIndex(this.index);

    };

    MusicPlayer.prototype.updateList = function () {
        var list = [];

        for (var i = 0; i < this.playList.length; i++) {
            list.push(this.dom.find("#item" + this.playList[i]).get(0));
        }
        this.domItemList = $.makeArray(list);

    };

    MusicPlayer.prototype.updateView = function (_duration, _callback) {

        var self = this;

        //리스트 뷰
        var duration = _duration === undefined ? self.showDuration : _duration;
        var callback = _callback === undefined ? function () { } : _callback;

        var prev2 = self.index - 2 < 0 ? this.count + (self.index - 2) : self.index - 2;
        var prev1 = self.index - 1 < 0 ? this.count + (self.index - 1) : self.index - 1;
        var currentIndex = self.index;
        var next1 = self.index + 1 > this.count - 1 ? self.index + 1 - this.count : self.index + 1;
        var next2 = self.index + 2 > this.count - 1 ? self.index + 2 - this.count : self.index + 2;

        $(self.domItemList[prev2]).stop(true, true).animate({
            left: "-1400px"
        }, duration, "easeInOutExpo", function () {
            $(this).hide();
        });

        $(self.domItemList[prev1]).stop(true, true).show().animate({
            left: "-480px"
        }, duration, "easeInOutExpo", function () { });

        $(self.domItemList[currentIndex]).stop(true, true).show().animate({
            left: "480px"
        }, duration, "easeInOutExpo", function () {

            if (self.moveTimer) clearTimeout(self.moveTimer);

            self.moveTimer = setTimeout(function () {

                callback();

            }, 700);

        });

        $(self.domItemList[next1]).stop(true, true).show().animate({
            left: "1440px"
        }, duration, "easeInOutExpo", function () { });

        $(self.domItemList[next2]).stop(true, true).animate({
            left: "2400px"
        }, duration, "easeInOutExpo", function () {
            $(this).hide();
        });

        for (var i = 0; i < self.domItemList.length; i++) {
            var _index = i;
            var _elem = self.domItemList[i];

            if (_index != prev2 && _index != prev1 && _index != currentIndex && _index != next1 && _index != next2) {
                $(_elem).stop(true, true).hide().animate({
                    left: "-2000px"
                }, duration);
            }

        }


        //재생 관련 뷰  제어
        if (self.isPlay) {
            self.domBtnPause.stop(true, true).show();
            self.domBtnPlay.stop(true, true).hide();
        } else {
            self.domBtnPause.stop(true, true).hide();
            self.domBtnPlay.stop(true, true).show();
        }


        if (self.playMode == 0) {

            self.domBtnShuffle.stop(true, true).show();
            self.domBtnLoop.stop(true, true).hide();
            self.domBtnOnly.stop(true, true).hide();

        } else if (self.playMode == 1) {

            self.domBtnShuffle.stop(true, true).hide();
            self.domBtnLoop.stop(true, true).show();
            self.domBtnOnly.stop(true, true).hide();

        } else if (self.playMode == 2) {

            self.domBtnShuffle.stop(true, true).hide();
            self.domBtnLoop.stop(true, true).hide();
            self.domBtnOnly.stop(true, true).show();

        }

        try {
            if (app.scene == MusicPlayer) {
                if (self.isTimeline) {
                    Notification.Timeline.show();
                } else {

                }
            }
        }
        catch (e) {

        }


    };

    MusicPlayer.prototype.display = function (_pixel, _trigger) {

        var isL = (_pixel.x > 0 && _pixel.x < 480 && _pixel.y > 204 && _pixel.y < 876);
        var isR = (_pixel.x > 1440 && _pixel.x < 1920 && _pixel.y > 204 && _pixel.y < 876);
        var isU = (_pixel.x > 480 && _pixel.x < 1440 && _pixel.y > 0 && _pixel.y < 204);
        var isD = (_pixel.x > 480 && _pixel.x < 1440 && _pixel.y > 876 && _pixel.y < 1080);
        var isTL = (_pixel.x > 0 && _pixel.x < 480 && _pixel.y > 0 && _pixel.y < 204);
        var isTR = (_pixel.x > 1440 && _pixel.x < 1920 && _pixel.y > 0 && _pixel.y < 204);
        var isBL = (_pixel.x > 0 && _pixel.x < 480 && _pixel.y > 876 && _pixel.y < 1080);
        var isBR = (_pixel.x > 1440 && _pixel.x < 1920 && _pixel.y > 876 && _pixel.y < 1080);
        var is1 = (_pixel.x > 480 && _pixel.x < 1440 && _pixel.y > 204 && _pixel.y < 876);

        if (isL) this.left(_trigger);
        else if (isR) this.right(_trigger);
        else if (isU) this.up(_trigger);
        else if (isD) this.down(_trigger);
        else if (isTL) this.power(_trigger);
        else if (isTR) this.mode(_trigger);
        else if (isBL) this.menu(_trigger);
        else if (isBR) this.back(_trigger);
        else if (is1) this.toggle(_trigger);

    };

    // 일반 뷰 로직
    MusicPlayer.prototype.trigger = function (vtouch, isLOCKHIT, isLOCKAREA, isDISPLAY, isSWITCH, isPHOTO, isTHERMO, isMUSIC) {

        var self = this;

        var Users = application.getUsers();

        //if (isSWITCH > -1) app.trigger_switch(vtouch, isSWITCH);
        //if (isMUSIC > -1) app.trigger_music(vtouch, isMUSIC);
        //if (isPHOTO > -1) app.trigger_photo(vtouch, isPHOTO);
        //if (isTHERMO > -1) app.trigger_thermo(vtouch, isTHERMO);

        // DISPLAY
        if (self.isFirstUser > -1) {

            if (Users[self.isFirstUser].vtouch === undefined) return;
            if (Users[self.isFirstUser].vtouch === null) return;

            if (vtouch[self.isFirstUser].trigger == "U") {

                var touch = Users[self.isFirstUser].vtouch;

                if (touch.id == "R") self.right("U");
                else if (touch.id == "L") self.left("U");
                else if (touch.id == "T") self.up("U");
                else if (touch.id == "B") self.down("U");
                else if (touch.id == "BR") self.back("U");
                else if (touch.id == "BL") self.menu("U");
                else if (touch.id == "TL") self.power("U");
                else if (touch.id == "TR") self.mode("U");
                else if (touch.id == "DISPLAY") {

                    var pixel = application.getScreenPoint(touch.point);

                    self.display(pixel, "U");

                }

                self.isFirstUser = -1;

            } else if (vtouch[self.isFirstUser].trigger == "NU") {

                self.isFirstUser = -1;

            } else if (vtouch[self.isFirstUser].trigger == "N") {

                self.isFirstUser = -1;

            } else if (vtouch[self.isFirstUser].trigger == "D") {

                var touch = Users[self.isFirstUser].vtouch;

                if (touch.id == "R") self.right("D");
                else if (touch.id == "L") self.left("D");
                else if (touch.id == "T") self.up("D");
                else if (touch.id == "B") self.down("D");
                else if (touch.id == "BR") self.back("D");
                else if (touch.id == "BL") self.menu("D");
                else if (touch.id == "TL") self.power("D");
                else if (touch.id == "TR") self.mode("D");
                else if (touch.id == "DISPLAY") {

                    var pixel = application.getScreenPoint(touch.point);

                    self.display(pixel, "D");

                }

            }

        } else {

            if (isDISPLAY > -1) {

                var isFirst = -1;

                for (var i = 0; i < 6; i++) {

                    if (Users[i].tracking == 1 && Users[i].triggerState == 0 && Users[i].isDownCount == 1) {

                        var touch = (Users[i].isRight) ? vtouch[i].right : vtouch[i].left;

                        if (touch.isHit) {

                            if (touch.id == "DISPLAY" || touch.id == "T" || touch.id == "B" || touch.id == "L" || touch.id == "R" || touch.id == "TL" || touch.id == "TR" || touch.id == "BL" || touch.id == "BR") isFirst = i;

                        }

                    }

                }

                if (isFirst > -1) {

                    self.isFirstUser = isFirst;

                    var touch = (Users[self.isFirstUser].isRight) ? vtouch[self.isFirstUser].right : vtouch[self.isFirstUser].left;

                    if (touch.isHit) {

                        Users[self.isFirstUser].vtouch = {};
                        Users[self.isFirstUser].vtouch.id = touch.id;
                        Users[self.isFirstUser].vtouch.point = {};
                        Users[self.isFirstUser].vtouch.point.x = touch.point.x;
                        Users[self.isFirstUser].vtouch.point.y = touch.point.y;

                        if (touch.id == "R") self.right("D");
                        else if (touch.id == "L") self.left("D");
                        else if (touch.id == "T") self.up("D");
                        else if (touch.id == "B") self.down("D");
                        else if (touch.id == "BR") self.back("D");
                        else if (touch.id == "BL") self.menu("D");
                        else if (touch.id == "TL") self.power("D");
                        else if (touch.id == "TR") self.mode("D");
                        else if (touch.id == "DISPLAY") {

                            var pixel = application.getScreenPoint(touch.point);

                            self.display(pixel, "D");

                        }

                    }

                }

            }

        }

        if (isLOCKAREA > -1) application.trigger_unlock(vtouch, isLOCKAREA);

    };

    MusicPlayer.prototype.left = function (_trigger) {

        var self = this;

        self.setTimerToReset();

        if (self.inputLast == "left") {

            self.inputCount++;

        } else {

            self.inputLast = "left";
            self.inputCount = 0;
            self.inputSpeed = 0;

            self.moveRelativeIndex(-1);

        }

        if (_trigger == "D") {

            Effect.longDown(Outside.domLeft);

            if (self.inputCount > 20 - self.inputSpeed) {

                self.inputCount = 0;
                self.inputSpeed = self.inputSpeed > 9 ? 10 : self.inputSpeed + 2;
                self.moveRelativeIndex(-1);

            }

        } else {

            Effect.up(Outside.domLeft, function () {

                self.inputCount = 0;
                self.inputSpeed = 0;

            });

        }

    };

    MusicPlayer.prototype.right = function (_trigger) {

        var self = this;

        self.setTimerToReset();

        if (self.inputLast == "right") {

            self.inputCount++;

        } else {

            self.inputLast = "right";
            self.inputCount = 0;
            self.inputSpeed = 0;

            self.moveRelativeIndex(1);

        }

        if (_trigger == "D") {

            Effect.longDown(Outside.domRight);

            if (self.inputCount > 20 - self.inputSpeed) {

                self.inputCount = 0;
                self.inputSpeed = self.inputSpeed > 9 ? 10 : self.inputSpeed + 2;
                self.moveRelativeIndex(1);

            }

        } else {

            Effect.up(Outside.domRight, function () {

                self.inputCount = 0;
                self.inputSpeed = 0;

            });

        }

    };

    MusicPlayer.prototype.up = function (_trigger) {

        var self = this;

        self.setTimerToReset();

        if (self.inputLast == "up") {

            self.inputCount++;

        } else {

            self.inputLast = "up";
            self.inputCount = 0;
            self.inputSpeed = 0;

            // 사운드 제어부
            self.audioVolume = self.audioVolume + 0.1 <= 1 ? self.audioVolume + 0.1 : 1;
            self.audioVolume = Math.round(self.audioVolume * 10) / 10;

            Notification.Volume.setVolume(self.audioVolume);

            clearTimeout(self.timelineTimer);

            self.isTimeline = false;

            self.timelineTimer = setTimeout(function () {

                self.isTimeline = true;

            }, 3000);

            self.socket.emit("volumeFromTV", self.audioVolume);

        }

        if (_trigger == "D") {

            Effect.longDown(Outside.domUp);

            if (self.inputCount > 20 - self.inputSpeed) {

                self.inputCount = 0;
                self.inputSpeed = self.inputSpeed > 9 ? 10 : self.inputSpeed + 2;

                // 사운드 제어부
                self.audioVolume = (self.audioVolume + 0.1 <= 1) ? self.audioVolume + 0.1 : 1;
                self.audioVolume = Math.round(self.audioVolume * 10) / 10;

                Notification.Volume.setVolume(self.audioVolume);

                clearTimeout(self.timelineTimer);

                self.isTimeline = false;

                self.timelineTimer = setTimeout(function () {

                    self.isTimeline = true;

                }, 3000);

                self.socket.emit("volumeFromTV", self.audioVolume);

            }

        } else {

            Effect.up(Outside.domUp, function () {

                self.inputCount = 0;
                self.inputSpeed = 0;

            });

        }

    };

    MusicPlayer.prototype.down = function (_trigger) {

        var self = this;

        self.setTimerToReset();

        if (self.inputLast == "down") {

            self.inputCount++;

        } else {

            self.inputLast = "down";
            self.inputCount = 0;
            self.inputSpeed = 0;

            // 사운드 제어부
            self.audioVolume = self.audioVolume - 0.1 >= 0 ? self.audioVolume - 0.1 : 0;
            self.audioVolume = Math.round(self.audioVolume * 10) / 10;

            Notification.Volume.setVolume(self.audioVolume);

            clearTimeout(self.timelineTimer);
            self.isTimeline = false;
            self.timelineTimer = setTimeout(function () {

                self.isTimeline = true;

            }, 3000);

            self.socket.emit("volumeFromTV", self.audioVolume);

        }

        if (_trigger == "D") {

            Effect.longDown(Outside.domDown);

            if (self.inputCount > 20 - self.inputSpeed) {

                self.inputCount = 0;
                self.inputSpeed = self.inputSpeed > 9 ? 10 : self.inputSpeed + 2;

                // 사운드 제어부
                self.audioVolume = self.audioVolume - 0.1 >= 0 ? self.audioVolume - 0.1 : 0;
                self.audioVolume = Math.round(self.audioVolume * 10) / 10;

                Notification.Volume.setVolume(self.audioVolume);

                clearTimeout(self.timelineTimer);
                self.isTimeline = false;
                self.timelineTimer = setTimeout(function () {

                    self.isTimeline = true;

                }, 3000);

                self.socket.emit("volumeFromTV", self.audioVolume);

            }

        } else {

            Effect.up(Outside.domDown, function () {

                self.inputCount = 0;
                self.inputSpeed = 0;

            });

        }

    };

    MusicPlayer.prototype.power = function (_trigger) {

        var self = this;

        if (_trigger == "D") Effect.quickDown(Outside.domPower);
        else {

            Effect.up(Outside.domPower, function () {

                application.power();

            });

        }

    };

    MusicPlayer.prototype.mode = function (_trigger) {

        var self = this;

        if (_trigger == "D") Effect.quickDown(Outside.domHome);
        else {

            Effect.up(Outside.domHome, function () {

                self.playMode = self.playMode > 1 ? 0 : self.playMode + 1;

                self.socket.emit("setMode", self.playMode);

                self.updateView();

            });

        }

    };

    MusicPlayer.prototype.menu = function (_trigger) {

        var self = this;

        if (_trigger == "D") Effect.quickDown(Outside.domMenu);
        else Effect.up(Outside.domMenu);

    };

    MusicPlayer.prototype.back = function (_trigger) {

        var self = this;

        if (_trigger == "D") Effect.quickDown(Outside.domBack);
        else {

            Effect.up(Outside.domBack, function () {

                application.popView();

            });

        }

    };

    MusicPlayer.prototype.setTimerToReset = function () {

        var self = this;

        if (self.inputTimer) clearTimeout(self.inputTimer);

        self.inputTimer = setTimeout(function () {

            self.resetTrigger();

        }, self.inputDuration);

    };

    MusicPlayer.prototype.resetTrigger = function () {

        var self = this;
        self.inputCount = 0;
        self.inputSpeed = 0;
        self.inputLast = null;

    };

    return MusicPlayer;

}());